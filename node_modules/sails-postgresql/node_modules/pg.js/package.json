{
  "name": "pg.js",
  "version": "3.3.0",
  "description": "node-postgres without the bindings",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "homepage": "http://github.com/brianc/node-postgres-pure",
  "repository": {
    "type": "git",
    "url": "git://github.com/brianc/node-postgres-pure.git"
  },
  "author": {
    "name": "Brian M. Carlson"
  },
  "license": "MIT",
  "dependencies": {
    "generic-pool": "2.0.3",
    "buffer-writer": "~1.0.0",
    "pgpass": "0.0.3",
    "packet-reader": "0.2.0",
    "pg-types": "1.3.0"
  },
  "devDependencies": {
    "mocha": "~1.12.0"
  },
  "readme": "node-postgres-pure\n==================\n\nThe exact same node-postgres module without any of the C/C++ stuff. If you're just using the pure JavaScript bindings, there's really no reason to wait for the native stuff to compile.\n\n### install\n\n`npm install pg.js`\n\n### use\n\n```js\n//exact same code, you can just change the string\n//in your requires from pg to pg.js and you're done\nvar pg = require('pg.js')\n\npg.connect(function(err, client, release) {\n  if (err) throw err;\n  client.query('SELECT NOW()', function(err, res) {\n    release()\n    if (err) throw err;\n    console.log(res.rows[0])\n  })\n})\n```\n\n### how it works\n\nI pull in the node-postgres repo and delete the `/src` folder and the `.gyp` file.\n\nThen I publish the same code to npm as `pg.js`.  So easy.\n\n### license\n\nMIT\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/brianc/node-postgres-pure/issues"
  },
  "_id": "pg.js@3.3.0",
  "dist": {
    "shasum": "c412f7260d8037e3304a439e0352eeb3f656566f"
  },
  "_from": "pg.js@~3.3.0",
  "_resolved": "https://registry.npmjs.org/pg.js/-/pg.js-3.3.0.tgz"
}
